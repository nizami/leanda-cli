// import click
// import json
// import logging
// import os
// import pkg_resources
// import sys

// from os import path

// from leanda import config, util
// from leanda.api import auth, nodes, blobs, category_trees
// from leanda.session import session

// logger = logging.getLogger('cli')

logger = Logger()

api = {
    auth = AuthApi()
    nodes = NodesApi()
    blobs = BlobsApi()
    categoryTrees = CategoryTreeApi()
}

CLI:

    whoami():
        console.write(session | JSON)


    // Allows to login and store the login info for a Leanda user.
    #CommandOption('-u', '--username'){help='Username.',required=true, prompt=true}
    #CommandOption('-p', '--password'){help='Password.', required=true, prompt=true){hideInput=true}
    login(username String, password String):
        api.auth.login(username, password)


    // Do logout. Session data is removed.
    logout():
        session.clear()
        logger.info('Session info was deleted.')


    // Identify current Leanda working directory.
    pwd():
        logger.info(api.nodes.getLocation())


    // Change Leanda's current working directory.
    cd(remoteNodeId GUID):
        api.nodes.setCwd(remoteNodeId)


    // Browse remote Leanda folder.
    #CommandOption('-s', '--show-id'){help='Show id of nodes.', isFlag=true, default=false}
    ls(showId Boolean):
        api.nodes.printCwdNodes(showId)


    // Allows to remove file or folder.
    rm(remoteNodes Array<GUID>):
        loop nodeNameOrId in remoteNodes:
            api.nodes.remove(nodeNameOrId)


    // Upload local direcory or file list to remote folder.
    #CommandOption('-r', '--remote'){help='Remote folder id. Root if ommited.', default=None}
    #CommandOption('-l', '--local'){help='Local directories and files (glob pattern) list. Current directory if ommited.', multiple=true, default=None}
    upload(remoteDirId GUID, localDirPath String):
        api.blobs.upload(remoteDirId, localDirPath)


    // Download remote folder or file list to local directory.
    #CommandOption('-r', '--remote'){help='Remote folder id. Root if ommited.', default=None}
    #CommandOption('-l', '--local'){help='Local directory. Current directory if ommited.', default=None}
    download(remoteDirId GUID, localDirPath String):
        remoteNode = api.nodes.getNodeById(remoteDirId || session.cwd)
        localPath = localDirPath || os.getcwd()
        blobs.download_folder(remoteNode, localPath)


    // Sync local direcory with remote folder.
    #CommandOption('-w', '--watch'){help='Watch and sync on changes.',  isFlag=true, default=true}
    #CommandOption('-r', '--remote'){help='Remote folder id. Root if ommited.', default=None}
    #CommandOption('-l', '--local'){help='Local directory path. Current directory if ommited.', default=None}
    livesync(watch Boolean, remoteDirId GUID, localDirPath String):
        remoteNode = api.nodes.getNodeById(remoteDirId or session.cwd) 
            || nodes.getNodeById(session.owner)
        localPath = localDirPath || os.getcwd() | Path |x: x.abs()
        logger.info('Local folder is ' + localPath)
        logger.info('Remote folder is ' + api.nodes.getLocation(remoteNode))
        api.blobs.sync(localPath, remoteNode)


    // List categories
    categories():
        logger.info(api.categoryTrees.getCategories() | JSON)
